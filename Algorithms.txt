1) Hash Table

import java.util.*;

public class Main{
	
    public static void main(String args[]) {    	

    	// Hashtable = A data structure that stores unique keys to values ex.<Integer, String>
    	//			   Each key/value pair is known as an Entry
    	//			   FAST insertion, look up, deletion of key/value pairs
    	// 			   Not ideal for small data sets, great with large data sets
    	
    	// hashing = Takes a key and computes an integer (formula will vary based on key & data type)
    	//		       In a Hashtable, we use the hash % capacity to calculate an index number 
    	
    	//			key.hashCode() % capacity = index  
    	
    	// bucket = an indexed storage location for one or more Entries
    	//	            can store multiple Entries in case of a collision (linked similarly a LinkedList)
    	
    	// collision = hash function generates the same index for more than one key
    	//			less collisions = more efficiency
    	
    	// Runtime complexity: Best Case O(1)
    	//                                     Worst Case O(n)

    	Hashtable<Integer, String> table = new Hashtable<>(10);
    	
    	table.put(100, "Spongebob");
    	table.put(123, "Patrick");
    	table.put(321, "Sandy");
    	table.put(555, "Squidward");
    	table.put(777, "Gary");
    	  	
    	for(Integer key : table.keySet()) {
    		System.out.println(key.hashCode() % 10 + "\t" + key + "\t" + table.get(key));
    	}
    }
}

--------------------------------------------------------------------------------------------------------------------

2) Linear Search


Pinned by Bro Code
Bro Code
1 week ago
public class Main{
			
    public static void main(String args[]){   
    	
    	// linear search = Iterate through a collection one element at a time
    	
    	int[] array = {9, 1, 8, 2, 7, 3, 6, 4, 5};
    	
    	int index = linearSearch(array, 5);
    	
    	if(index != -1) {
    		System.out.println("Element found at index: " + index);
    	}
    	else {
    		System.out.println("Element not found");
    	}
    		
    }

	private static int linearSearch(int[] array, int value) {
		
		for(int i = 0; i < array.length; i++) {
			if(array[i] == value) {
				return i;
			}
		}
		
		return -1;
	}
}

--------------------------------------------------------------------------------------------------------------

3) Multi Threading

Java multithreading tutorial

#java #multithreading #tutorial

//***************************************************************
public class Main{
  
    public static void main(String[] args) throws InterruptedException{  

     // Create a subclass of Thread
     MyThread thread1 = new MyThread();
       
     //or 
     
     //implement Runnable interface and pass instance as an argument to Thread() 
     MyRunnable runnable1 = new MyRunnable();
     Thread thread2 = new Thread(runnable1);
     
     
     //thread1.setDaemon(true);
     //thread2.setDaemon(true);
     
     thread1.start();
     //thread1.join(); //calling thread (ex.main) waits until the specified thread dies or for x milliseconds
     thread2.start();
     
     //System.out.println(1/0);
    } 
}
//***************************************************************

-------------------------------------------------------------------------------------------------------------------

3) Priority Queue


import java.util.*;

public class Main{
	
    public static void main(String args[])
    {    	
    	//Priority Queue = A FIFO data structure that serves elements
    	//                             with the highest priorities first 
    	//				  before elements with lower priority
    	
    	//Strings in default order
    	Queue<String> queue = new PriorityQueue<>();
    	
    	//Strings in reverse order
    	//Queue<String> queue = new PriorityQueue<>(Collections.reverseOrder());
    	
    	queue.offer("B");
    	queue.offer("C");
    	queue.offer("A");
    	queue.offer("F");
    	queue.offer("D");
    	
    	while(!queue.isEmpty()) {
    		System.out.println(queue.poll());
    	}
    }
}

-----------------------------------------------------------------------------------------------------------------

4) Interpolation Search


public class Main{
			
    public static void main(String args[]){   
    	
    	//interpolation search =  improvement over binary search best used for "uniformly" distributed data
    	//					     "guesses" where a value might be based on calculated probe results
    	//				             if probe is incorrect, search area is narrowed, and a new probe is calculated
    	
    	//						  average case: O(log(log(n)))
    	//						  worst case: O(n) [values increase exponentially]

    	int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    	
    	int index = interpolationSearch(array, 8);
    	
    	if(index != -1) {
    		System.out.println("Element found at index: "+ index);
    	}
    	else {
    		System.out.println("Element not found");
    	}
    }

	private static int interpolationSearch(int[] array, int value) {
		
		int high = array.length - 1;
		int low = 0;
		
		while(value >= array[low] && value <= array[high] && low <= high) {
			
			int probe = low + (high - low) * (value - array[low]) / 
					    (array[high] - array[low]);
			
			
			//System.out.println("probe: " + probe);
			
			if(array[probe] == value) {
				return probe;
			}
			else if(array[probe] < value) {
				low = probe + 1;
			}
			else {
				high = probe -1;
			}
		}
		
		return -1;
	}
}

--------------------------------------------------------------------------------------------------------------

5) Stacks


import java.util.Stack;

public class Main{
	
	public static void main(String[] args) {
		
		// *****************************************************
		
		// stack = LIFO data structure. Last-In First-Out
		//               stores objects into a sort of "vertical tower"
		//		  push() to add objects to the top
		//		  pop() to remove objects from the top
		
		// uses of stacks?
		// 1. undo/redo features in text editors
		// 2. moving back/forward through browser history
		// 3. backtracking algorithms (maze, file directories)
		// 4. calling functions (call stack)
		
		// *****************************************************
		
		Stack<String> stack = new Stack<String>();
		
		//System.out.println(stack.empty());
		
		stack.push("Minecraft");
		stack.push("Skyrim");
		stack.push("DOOM");
		stack.push("Borderlands");
		stack.push("FFVII");
		
		//String myFavGame = stack.pop();
		//System.out.println(stack.peek());	
		//System.out.println(stack.search("Fallout76"));
		System.out.println(stack);
		
	}
}

-----------------------------------------------------------------------------------------------------------------------

6) Queue 

import java.util.Queue;
import java.util.LinkedList;

public class Main{
	
	public static void main(String[] args) {
		
		// *****************************************************
		
		// Queue = FIFO data structure. First-In First-Out
		//		   A collection designed for holding elements prior to processing
		//		   Linear data structure
		
		//         enqueue = offer()
		//         dequeue = poll()
		
		// Where are queues useful?
		
		// 1. Keyboard Buffer (letters should appear on the screen in the order they're pressed)
		// 2. Printer Queue (Print jobs should be completed in order)
		// 3. Used in LinkedLists, PriorityQueues, Breadth-first search
		
		// *****************************************************
		
		Queue<String> queue = new LinkedList<String>();
		
		queue.offer("Karen");
		queue.offer("Chad");
		queue.offer("Steve");
		queue.offer("Harold");
		
		//System.out.println(queue.isEmpty());
		//System.out.println(queue.size());
		//System.out.println(queue.contains("Harold"));
		
		//System.out.println(queue.peek());
		//queue.poll();
		//queue.poll();
		//queue.poll();
		//queue.poll();
					
		System.out.println(queue);
		
	}
}

-----------------------------------------------------------------------------------------------------------------

7) Linked List

TL;DR 
small data set:                                                LinkedList = BAD
large data set + lots of searching:               LinkedList = BAD
large data set + lots of inserting/deleting: LinkedList = GOOD 


import java.util.LinkedList;


public class Main{
	
 public static void main(String[] args) {
  // *****************************************************
  
  // LinkedList =  Nodes are in 2 parts (data + address)
  //                        Nodes are in non-consecutive memory locations
  //                        Elements are linked using pointers
            
  //    advantages?
  //    1. Dynamic Data Structure (allocates needed memory while running)
  //    2. Insertion and Deletion of Nodes is easy. O(1) 
  //    3. No/Low memory waste
  
  //    disadvantages?
  //    1. Greater memory usage (additional pointer)
  //    2. No random access of elements (no index [i])
  //    3. Accessing/searching elements is more time consuming. O(n)
  
  //    uses?
  //    1. implement Stacks/Queues
  //    2. GPS navigation
  //    3. music playlist
  //
  
  // *****************************************************

LinkedList<String> linkedList = new LinkedList<String>();
		/*
		// LinkedList as a Stack
		linkedList.push("A");
		linkedList.push("B");
		linkedList.push("C");
		linkedList.push("D");
		linkedList.push("F");
		linkedList.pop();
		*/
		// LinkedList as a Queue
		linkedList.offer("A");
		linkedList.offer("B");
		linkedList.offer("C");
		linkedList.offer("D");
		linkedList.offer("F");
		//linkedList.poll();
		
		//linkedList.add(4, "E");
		//linkedList.remove("E");
		//System.out.println(linkedList.indexOf("F"));
		
		
		//System.out.println(linkedList.peekFirst());
		//System.out.println(linkedList.peekLast());
		//linkedList.addFirst("0");
		//linkedList.addLast("G");
		//String first = linkedList.removeFirst();
		//String last = linkedList.removeLast();
		
		System.out.println(linkedList);
		
	}
}

--------------------------------------------------------------------------------------------------------------

8) Linked List vs Arrays


import java.util.ArrayList;
import java.util.LinkedList;

public class Main{
	
	public static void main(String[] args) {

		LinkedList<Integer> linkedList = new LinkedList<Integer>();
		ArrayList<Integer> arrayList = new ArrayList<Integer>();
		
		long startTime;
		long endTime;
		long elapsedTime;
		
		for(int i = 0; i < 1000000; i++){
			linkedList.add(i);
			arrayList.add(i);
		}
					
		// ****************LinkedList****************
		startTime = System.nanoTime();
		
		linkedList.get(0);
		//linkedList.get(500000);
		//linkedList.get(999999);
		//linkedList.remove(0);
		//linkedList.remove(500000);
		//linkedList.remove(999999);
		
		endTime = System.nanoTime();
		
		elapsedTime = endTime - startTime;
		
		System.out.println("LinkedList:\t" + elapsedTime +" ns");
		
		// ****************ArrayList****************	
		
		startTime = System.nanoTime();
		
		arrayList.get(0);
		//arrayList.get(500000);
		//arrayList.get(999999);
		//arrayList.remove(0);
		//arrayList.remove(500000);
		//arrayList.remove(999999);
		
		endTime = System.nanoTime();
		
		elapsedTime = endTime - startTime;
		
		System.out.println("ArrayList:\t" + elapsedTime +" ns");
				
	}
}

--------------------------------------------------------------------------------------------------------------

9) Dynamic Array


public class Main{
	
	public static void main(String[] args) {

		DynamicArray dynamicArray = new DynamicArray(5);
		
		dynamicArray.add("A");
		dynamicArray.add("B");
		dynamicArray.add("C");
		
		//System.out.println(dynamicArray.get(0));
		//dynamicArray.insert(0, "X");
		//dynamicArray.delete("A");
		//System.out.println(dynamicArray.search("C"));
		
		System.out.println(dynamicArray);
		System.out.println("size: " + dynamicArray.size);
		System.out.println("capacity: " + dynamicArray.capacity);
		System.out.println("empty: " + dynamicArray.isEmpty());
	}
}
public class DynamicArray {

	int size;
	int capacity = 10;
	Object[] array;
	
	public DynamicArray() {
		this.array = new Object[capacity];
	}
	public DynamicArray(int capacity) {
		this.capacity = capacity;
		this.array = new Object[capacity];
	}
	
        public Object get(int index) {
            return array[index];
        }
	
	public void add(Object data) {
		
		if(size >= capacity) {
			grow();
		}
		array[size] = data;
		size++;
	}
	
	public void insert(int index, Object data) {
		
		if(size >= capacity) {
			grow();
		}
		for(int i = size; i > index; i--) {
			array[i] = array[i - 1];
		}
		array[index] = data;
		size++;
	}
	
	public void delete(Object data) {
		
		for(int i = 0; i < size; i++) {
			if(array[i] == data) {
				for(int j = 0; j < (size - i - 1); j++){
					array[i + j] = array[i + j + 1];
				}
				array[size - 1] = null;
				size--;
				if(size <=(int) (capacity/3)) {
					shrink();
				}
				break;
			}
		}
	}
	
	public int search(Object data) {
		
		for(int i = 0; i < size; i++) {
			if(array[i] == data) {
				return i;
			}
		}
		return -1;
	}
	
	private void grow() {
		
		int newCapacity = (int)(capacity * 2);
		Object[] newArray = new Object[newCapacity];
		
		for(int i = 0; i < size; i++) {
			newArray[i] = array[i];
		}
		capacity = newCapacity;
		array = newArray;
	}
	
	private void shrink() {
		
		int newCapacity = (int)(capacity / 2);
		Object[] newArray = new Object[newCapacity];
		
		for(int i = 0; i < size; i++) {
			newArray[i] = array[i];
		}
		capacity = newCapacity;
		array = newArray;
	}
	
	public boolean isEmpty() {
		return size == 0;
	}
	
	public String toString() {
		
		String string = "";
		
		for(int i = 0; i < capacity; i++) {
			string += array[i] + ", ";
		}
		if(string != "") {
			string = "[" + string.substring(0, string.length() - 2) + "]";
		}
		else {
			string = "[]";
		}
		return string;
	}
}

---------------------------------------------------------------------------------------------------------------------

10) Binary Search 


import java.util.Arrays;

public class Main{
	
	// binary search = Search algorithm that finds the position
	//				   of a target value within a sorted array.
	//				   Half of the array is eliminated during each "step"
	
	public static void main(String[] args) {
		
		int array[] = new int[1000000];
		int target = 777777;
		
		for(int i = 0; i < array.length; i++) {
			array[i] = i;
		}
		
		//int index = Arrays.binarySearch(array, target);
		int index = binarySearch(array, target);
		
		if(index == -1) {
			System.out.println(target + " not found");
		}
		else {
			System.out.println("Element found at: " + index);
		}
		
	}

	private static int binarySearch(int[] array, int target) {
		
		int low = 0;
		int high = array.length - 1;
		
		while(low <= high) {
			
			int middle = low + (high - low) / 2;
			int value = array[middle];
			
			System.out.println("middle: " + value);
			
			if(value < target) low = middle + 1;
			else if(value > target) high = middle - 1;
			else return middle; //target found
		}
		
		return -1;
	}
}

-------------------------------------------------------------------------------------------------------------

11) Bubble Sort


public class Main{
	
	// bubble sort = pairs of adjacent elements are compared, and the elements
	//		            swapped if they are not in order.
	
	//				 Quadratic time O(n^2)
	//				 small data set = okay-ish
	//				 large data set = BAD (plz don't)
	
	public static void main(String[] args) {
		
		int array[] =  {9, 1, 8, 2, 7, 3, 6, 4, 5};
		
		bubbleSort(array);
		
		for(int i : array) {
			System.out.print(i);
		}
	}
	
	public static void bubbleSort(int array[]) {
		
		for(int i = 0; i < array.length - 1; i++) {
			for(int j = 0; j < array.length - i - 1; j++) {
				if(array[j] > array[j+1]) {
					int temp = array[j];
					array[j] = array[j+1];
					array[j+1] = temp;
				}
			}
		}
	}
}

-------------------------------------------------------------------------------------------------------------------

12) Quick Sort


Pinned by Bro Code
Bro Code
2 months ago (edited)

public class Main{
	
    public static void main(String args[])
    {   	
    	// quick sort = moves smaller elements to left of a pivot.
    	//			   recursively divide array in 2 partitions

    	//                       run-time complexity = Best case O(n log(n))
    	//				   		                   Average case O(n log(n))
    	//				   		                   Worst case O(n^2) if already sorted
    	
    	//                       space complexity    = O(log(n)) due to recursion
    	
        int[] array = {8, 2, 5, 3, 9, 4, 7, 6, 1};
        
        quickSort(array, 0, array.length - 1);
        
        for(int i : array){
            System.out.print(i + " ");
        }
    }

	private static void quickSort(int[] array, int start, int end) {
		
		if(end <= start) return; //base case
		
		int pivot = partition(array, start, end);
		quickSort(array, start, pivot - 1);
		quickSort(array, pivot + 1, end);		
	}
	private static int partition(int[] array, int start, int end) {
		
		int pivot = array[end];
		int i = start - 1;
		
		for(int j = start; j <= end; j++) {
			if(array[j] < pivot) {
				i++;
				int temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
		}
		i++;
		int temp = array[i];
		array[i] = array[end];
		array[end] = temp;
		
		return i;
	}
}



-------------------------------------------------------------------------------------------------------------------

13) Merge Sort

public class Main{
	
    public static void main(String args[])
    {   	
    	// merge sort = recursively divide array in 2, sort, re-combine
    	// run-time complexity = O(n Log n)
    	// space complexity    = O(n)
    	
        int[] array = {8, 2, 5, 3, 4, 7, 6, 1};
        
        mergeSort(array);
        
        for(int i = 0; i < array.length; i++){
            System.out.print(array[i]+ " ");
        }
    }

	private static void mergeSort(int[] array) {
		
		int length = array.length;
		if (length <= 1) return; //base case
		
		int middle = length / 2;
		int[] leftArray = new int[middle];
		int[] rightArray = new int[length - middle];
		
		int i = 0; //left array
		int j = 0; //right array
		
		for(; i < length; i++) {
			if(i < middle) {
				leftArray[i] = array[i];
			}
			else {
				rightArray[j] = array[i];
				j++;
			}
		}
		mergeSort(leftArray);
		mergeSort(rightArray);
		merge(leftArray, rightArray, array);
	}
	
	private static void merge(int[] leftArray, int[] rightArray, int[] array) {
		
		int leftSize = array.length / 2;
		int rightSize = array.length - leftSize;
		int i = 0, l = 0, r = 0; //indices
		
		//check the conditions for merging
		while(l < leftSize && r < rightSize) {
			if(leftArray[l] < rightArray[r]) {
				array[i] = leftArray[l];
				i++;
				l++;
			}
			else {
				array[i] = rightArray[r];
				i++;
				r++;
			}
		}
		while(l < leftSize) {
			array[i] = leftArray[l];
			i++;
			l++;
		}
		while(r < rightSize) {
			array[i] = rightArray[r];
			i++;
			r++;
		}
	}
}


-------------------------------------------------------------------------------------------------------------------

14) Insertion Sort

public class Main{
	
	// Insertion sort = after comparing elements to the left,
	//				shift elements to the right to make room to insert a value
	
	//				Quadratic time O(n^2)
	//				small data set = decent
	//				large data set = BAD
	
	//				Less steps than Bubble sort
	//				Best case is O(n) compared to Selection sort O(n^2)
	
	public static void main(String[] args) {
		
		int array[] = {9, 1, 8, 2, 7, 3, 6, 5, 4};
		
		insertionSort(array);
		
		for(int i : array) {
			System.out.print(i + " ");
		}
	}

	private static void insertionSort(int[] array) {
		
		for(int i = 1; i < array.length; i++) {
			int temp = array[i];
			int j = i - 1;
			
			while(j >= 0 && array[j] > temp) {
				array[j + 1] = array[j];
				j--;
			}
			array[j + 1] = temp;
		}
	}
}


-------------------------------------------------------------------------------------------------------------------

15) Selection Sort 

public class Main{
	
	// selection sort = search through an array and keep track of the minimum value during 
	//			         each iteration. At the end of each iteration, we swap values.
	
	//				 Quadratic time O(n^2)
	//				 small data set = okay
	//				 large data set = BAD
	
	public static void main(String[] args) {
		
		int array[] = {8, 7, 9, 2, 3, 1, 5, 4, 6};
		
		selectionSort(array);
		
		for(int i : array) {
			System.out.print(i);
		}	
	}

	private static void selectionSort(int[] array) {
		
		for(int i = 0; i < array.length - 1; i++) {
			int min = i;
			for(int j = i + 1; j < array.length; j++) {
				if(array[min] > array[j]) {
					min = j;
				}
			}
			
			int temp = array[i];
			array[i] = array[min];
			array[min] = temp;
		}
		
	}
}

-------------------------------------------------------------------------------------------------------------------

16) Recursion 

public class Main{
	
	// recursion = When a thing is defined in terms of itself. - Wikipedia
	//			   Apply the result of a procedure, to a procedure.  
	//			   A recursive method calls itself. Can be a substitute for iteration.
	//			   Divide a problem into sub-problems of the same type as the original.
	//			   Commonly used with advanced sorting algorithms and navigating trees
		
	//			   Advantages
	//			   ----------
	//			   easier to read/write
	//			   easier to debug
		
	//			   Disadvantages
	//			   ----------
	//			   sometimes slower
	//			   uses more memory
	
	public static void main(String[] args) {
		
		walk(5);
		System.out.println(factorial(7));
		System.out.println(power(2, 8));
	}

	private static void walk(int steps) {
		
		if(steps < 1) return; //base case
		System.out.println("You take a step!");
		walk(steps - 1); //recursive case
	}
	private static int factorial(int num) {
		
	    if (num < 1) return 1; //base case
	    return num * factorial(num - 1); //recursive case
	}

	private static int power(int base, int power) {
		
	    if (power < 1) return 1; //base case
	    return base * power(base, power - 1); //recursive case
	}
}

------------------------------------------------------------------------------------------------------------

17) Graph Adjescency Matrix

import java.util.Scanner;

class Main {
     
    public static void main(String[] args) {
    	
    	// adjacency matrix = a grid of 0's and 1's to determine adjacency
    	//					rows    = # of nodes
    	//					columns = # of nodes
    	
    	//					time complexity:  O(1)
    	//				       space complexity: O(n^2)
    	
    	Scanner scanner = new Scanner(System.in);
    	Graph graph = new Graph(5);
    	
    	graph.addEdge(0, 1);
    	graph.addEdge(1, 2);
    	graph.addEdge(1, 4);
    	graph.addEdge(2, 3);
    	graph.addEdge(2, 4);
    	graph.addEdge(4, 0);
    	graph.addEdge(4, 2);
    	  	
    	graph.printGraph();
    	
    	System.out.print("Enter a row#(1-5): ");
    	int row = scanner.nextInt() - 1;
    	System.out.print("Enter a column#(1-5): ");
    	int column = scanner.nextInt() - 1;
    	
    	if(graph.checkEdge(row, column) == 1) {
    		System.out.println("There is an edge");
    	}
    	else {
    		System.out.println("There is no edge");
    	}
    }
}

/////////////////////////////////////////////////////////////
import java.util.ArrayList;

public class Graph {

	int[][] matrix;
	ArrayList<Node> list;
	int nodes;
	
	public Graph(int nodes) {
		matrix = new int[nodes][nodes];
		this.nodes = nodes;
		list = new ArrayList<>();
		list.add(new Node('A'));
		list.add(new Node('B'));
		list.add(new Node('C'));
		list.add(new Node('D'));
		list.add(new Node('E'));
		
		for(int i = 0; i < nodes; i++) {
			for(int j = 0; j < nodes; j++) {
				matrix[i][j] = 0;
			}
		}
	}
	
	public void addEdge(int row, int column) {
		matrix[row][column] = 1;
		//matrix[column][row] = 1; 
	}
	
	public void removeEdge(int row, int column) {
		matrix[row][column] = 0;
		//matrix[column][row] = 0; 
	}
	
	int checkEdge(int row, int column) {
		return matrix[row][column];
	}
	
	public void printGraph() {
		
		System.out.print("  ");
		for(int i = 0; i < list.size(); i++) {
			System.out.print(list.get(i).data + " ");
		}
		System.out.println();
		
		for(int i = 0; i < nodes; i++) {
			System.out.print(list.get(i).data + " ");
			for(int j = 0; j < nodes; j++) {
				System.out.print(matrix[i][j] + " ");
			}
			System.out.println();
		}
	}
}
public class Node {

	char data;
	
	Node(char data){
		this.data ?= data;
	}
}

------------------------------------------------------------------------------------------------------------

18) Graph adjacency list 📑

IMPORTANT NOTE:
There are many ways to create and update an adjacency list,
this is one way I thought may be easiest to understand.
Basically you just need a collection of LinkedLists.
A HashTable of LinkedList<Node> is another popular implementation.

import java.util.Scanner;

class Main {
     
    public static void main(String[] args) {
    	
    	// adjacency list = An array/ArrayList of LinkedLists
    	//			         Each LinkedList has a unique node at the head
    	//				  If the head node is adjacent to another node,
    	//				  add the adjacent node to the tail of the LinkedList
    	
    	//				  time complexity to find an edge:  O(v)
    	//				  space complexity: O(v + e)
    	
    	Scanner scanner = new Scanner(System.in);
    	Graph graph = new Graph();
    	
    	graph.addNode(0, new Node('A'));
    	graph.addNode(1, new Node('B'));
    	graph.addNode(2, new Node('C'));
    	graph.addNode(3, new Node('D'));
    	graph.addNode(4, new Node('E'));  	
    	
    	graph.addEdge(0, 1);
    	graph.addEdge(1, 2);
    	graph.addEdge(1, 4);
    	graph.addEdge(2, 3);
    	graph.addEdge(2, 4);
    	graph.addEdge(4, 0);
    	graph.addEdge(4, 2);
    		  	
    	graph.printGraph();
    	
    	System.out.print("Enter index of src node: ");
    	int src = scanner.nextInt();
    	System.out.print("Enter index of dst node: ");
    	int dst = scanner.nextInt();
    	
    	if(graph.checkEdge(src, dst) > 0) {
    		System.out.println("There is an edge");
    	}
    	else {
    		System.out.println("There is no edge");
    	}
    }
}
///////////////////////////////////////////////////////////////////
import java.util.ArrayList;
import java.util.LinkedList;

public class Graph {

	ArrayList<LinkedList<Node>> list;
	
	Graph(){
		list = new ArrayList<>();
	}
	
	public void addNode(int src, Node node) {
		list.add(new LinkedList<Node>());
		list.get(src).add(node);
	}
	
	public void removeNode(int src) {
		list.remove(src);
	}
	
	public void addEdge(int src, int dst) {
		list.get(src).add(list.get(dst).get(0));
		//list.get(dst).add(list.get(src).get(0)); //undirected graph
	}
	
	public void removeEdge(int src, int dst) {
		list.get(src).removeLastOccurrence(list.get(dst).get(0));
		//list.get(dst).removeLastOccurrence(list.get(src).get(0)); //undirected graph
	}
	
	public int checkEdge(int src, int dst) {	
		int result = list.get(src).indexOf(list.get(dst).get(0));
		return result;
	}
	
	public void printGraph() {
		
		for(LinkedList<Node> linkedList : list) {
			for(Node node : linkedList) {
				System.out.print(node.data + "-> ");
			}
			System.out.println();
		}
	}
}
public class Node {
	
	char data;
	
	Node(char data){
		this.data ?= data;
	}
}

------------------------------------------------------------------------------------------------------------------------

19) Depth First Search ⬇️


public class Main {

	public static void main(String[] args) {
		
		// Depth First Search = Pick a route, keep going.
		//					 If you reach a dead end, or an already visited node,
		//					 backtrack to a previous node with unvisited adjacent neighbors
		
		Graph graph = new Graph(5);
		
		graph.addNode(new Node('A'));
		graph.addNode(new Node('B'));
		graph.addNode(new Node('C'));
		graph.addNode(new Node('D'));
		graph.addNode(new Node('E'));
		
		graph.addEdge(0, 1);
		graph.addEdge(1, 2);
		graph.addEdge(1, 4);
		graph.addEdge(2, 3);
		graph.addEdge(2, 4);
		graph.addEdge(4, 0);
		graph.addEdge(4, 2);
		
		graph.print();
		
		graph.depthFirstSearch(0);
	}
}
import java.util.*;

public class Graph {
	
	ArrayList<Node> nodes;
	int[][] matrix;
	
	Graph(int size){
		
		nodes = new ArrayList<>();
		matrix = new int[size][size];
	}
	public void addNode(Node node) {
		
		nodes.add(node);
	}	
	public void addEdge(int src, int dst) {
		
		matrix[src][dst] = 1;
	}	
	public boolean checkEdge(int src, int dst) {
		
		if(matrix[src][dst] == 1) {
			return true;
		}
		else {
			return false;
		}
	}	
	public void print() {	
		
		System.out.print("  ");
		for(Node node : nodes) {
			System.out.print(node.data ? + " ");
		}
		System.out.println();
		
		for(int i = 0; i < matrix.length; i++) {
			System.out.print(nodes.get(i).data + " ");
			for(int j = 0; j < matrix[i].length; j++) {
				System.out.print(matrix[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}	
	public void depthFirstSearch(int src) {
		boolean[] visited = new boolean[matrix.length];
		dFSHelper(src, visited);
	}
	private void dFSHelper(int src, boolean[] visited) {
		
		if(visited[src]) {
			return;
		}
		else {
			visited[src] = true;
			System.out.println(nodes.get(src).data + " = visited");
		}
		
		for(int i = 0; i < matrix[src].length; i++) {
			if(matrix[src][i] == 1) {
				dFSHelper(i, visited);
			}
		}
		return;
	}
}
public class Node {

	char data;
	
	Node(char data){
		this.data ? = data;
	}
}

----------------------------------------------------------------------------------------------------------------

20)  